import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Ridge
from scipy.special import expit
import collections
import sim_regressions as reg

def get_x_ext_1():
    data = np.array([
        [0.002654867256637161, -1.3092783505154628],
        [0.019469026548672552, -1.2474226804123703],
        [0.034513274336283206, -1.1237113402061851],
        [0.04778761061946901, -1.0103092783505154],
        [0.06106194690265487, -0.8865979381443294],
        [0.0769911504424779, -0.7525773195876289],
        [0.10000000000000003, -0.5773195876288657],
        [0.1203539823008849, -0.48453608247422597],
        [0.1398230088495575, -0.44329896907216515],
        [0.15929203539823011, -0.4226804123711343],
        [0.1805309734513274, -0.40206185567010255],
        [0.20265486725663717, -0.32989690721649456],
        [0.220353982300885, -0.24742268041237114],
        [0.23716814159292032, -0.14432989690721598],
        [0.2504424778761062, -0.041237113402061265],
        [0.2646017699115044, 0.08247422680412386],
        [0.27876106194690264, 0.21649484536082486],
        [0.291150442477876, 0.329896907216495],
        [0.3044247787610619, 0.4536082474226806],
        [0.31504424778761064, 0.5567010309278353],
        [0.32654867256637166, 0.7216494845360826],
        [0.33893805309734504, 0.855670103092784],
        [0.35044247787610616, 1.0206185567010309],
        [0.36283185840707965, 1.195876288659794],
        [0.3761061946902655, 1.3608247422680408],
        [0.38938053097345127, 1.536082474226804],
        [0.4, 1.6082474226804124]
    ])

    time = data[:,0]
    x_ext_1 = data[:,1]

    centres = np.arange(0, 0.4, .1)
    width = .15
    result = reg.Regression(time, x_ext_1, centres, width, .1, sigmoids=False)

    return result

def get_x_ext_2():
    data = np.array([
        [-0.0008849557522123686, 0.9587628865979383],
        [0.010619469026548645, 0.7525773195876293],
        [0.02035398230088492, 0.5876288659793816],
        [0.030088495575221252, 0.4226804123711343],
        [0.03716814159292037, 0.26804123711340244],
        [0.04513274336283185, 0.10309278350515472],
        [0.0539823008849557, -0.08247422680412342],
        [0.06106194690265487, -0.24742268041237114],
        [0.06814159292035399, -0.3917525773195871],
        [0.0752212389380531, -0.5670103092783503],
        [0.0858407079646018, -0.7731958762886597],
        [0.09646017699115045, -0.9587628865979383],
        [0.1053097345132743, -1.1134020618556697],
        [0.11637168141592918, -1.2371134020618548],
        [0.127433628318584, -1.3608247422680408],
        [0.1415929203539823, -1.4639175257731951],
        [0.15752212389380532, -1.5051546391752568],
        [0.1743362831858407, -1.4948453608247414],
        [0.19292035398230079, -1.4329896907216488],
        [0.21327433628318582, -1.3298969072164937],
        [0.23274336283185837, -1.1855670103092777],
        [0.25132743362831855, -1.0206185567010309],
        [0.2672566371681415, -0.8453608247422677],
        [0.2805309734513274, -0.6701030927835046],
        [0.2929203539823009, -0.4948453608247414],
        [0.3044247787610619, -0.2989690721649483],
        [0.315929203539823, -0.14432989690721598],
        [0.32654867256637166, 0.05154639175257758],
        [0.33893805309734504, 0.257731958762887],
        [0.3486725663716813, 0.4329896907216493],
        [0.3575221238938052, 0.6082474226804124],
        [0.368141592920354, 0.8144329896907219],
        [0.3787610619469026, 0.9690721649484537],
        [0.3884955752212389, 1.134020618556701],
        [0.4, 1.3195876288659796]
    ])

    time = data[:,0]
    x_ext_2 = data[:,1]

    centres = np.arange(0, 0.4, .1)
    width = .15
    result = reg.Regression(time, x_ext_2, centres, width, .1, sigmoids=False)

    return result

def get_x_ext_3():
    data = np.array([
        [0.00000862533692691514, -15.017681940700808],
        [0.057906199460916685, -13.982641509433957],
        [0.08674501347708885, -12.783288409703506],
        [0.10269326145552515, -11.662425876010783],
        [0.12830188679245236, -10.435902964959563],
        [0.14102425876010694, -9.314609164420485],
        [0.16661563342317942, -7.981132075471699],
        [0.18576388140161582, -6.700269541778976],
        [0.19844312668463493, -5.311590296495954],
        [0.21758274932614396, -3.9772506738544493],
        [0.23670512129379828, -2.5359568733153672],
        [0.2558533692722347, -1.2550943396226408],
        [0.2749843665768168, 0.13272237196765602],
        [0.2941326145552532, 1.4135849056603789],
        [0.3068291105121266, 2.6953099730458234],
        [0.33886361185983516, 4.081401617250675],
        [0.36446361185983456, 5.361401617250674],
        [0.3900938005390797, 6.45423180592992],
        [0.4415741239892146, 7.2762264150943405]
    ])

    time = data[:,0]
    x_ext_3 = data[:,1]

    centres = np.arange(0, 0.4, .1)
    width = .15
    result = reg.Regression(time, x_ext_3, centres, width, .1, sigmoids=False)

    return result

def get_x_ext_4(time, x_ext_3_traj):
    x_ext_3_traj = np.array(x_ext_3_traj)
    dy = np.zeros(x_ext_3_traj.shape, np.float)
    dy[0:-1] = np.diff(x_ext_3_traj)/np.diff(time)
    dy[-1] = (x_ext_3_traj[-1] - x_ext_3_traj[-2])/(time[-1] - time[-2])
    dy = np.array(dy)

    x_ext_4 = dy

    centres = np.arange(0, 0.4, .1)
    width = .15
    result = reg.Regression(time, x_ext_4, centres, width, .1, sigmoids=False)

    return result

x_ext_1 = get_x_ext_1()
x_ext_2 = get_x_ext_2()
x_ext_3 = get_x_ext_3()
time = np.arange(0, 0.4, 0.01)
x_ext_1_traj = []
x_ext_2_traj = []
x_ext_3_traj = []

for i in range(len(time)):
    x_ext_1_traj.append(x_ext_1.eval(time[i])[0])
    x_ext_2_traj.append(x_ext_2.eval(time[i])[0])
    x_ext_3_traj.append(x_ext_3.eval(time[i])[0])

x_ext_4 = get_x_ext_4(time, x_ext_3_traj)
x_ext_4_traj = []

for i in range(len(time)):
    x_ext_4_traj.append(x_ext_4.eval(time[i])[0])


# plt.figure()
# plt.subplot(4,1,1)
# plt.plot(time, x_ext_1_traj)
# plt.ylabel('Horizontal Acceleration')
# plt.subplot(4,1,2)
# plt.plot(time, x_ext_2_traj)
# plt.ylabel('Vertical Acceleration')
# plt.subplot(4,1,3)
# plt.plot(time, x_ext_3_traj)
# plt.ylabel('Absolute Shank Orientation')
# plt.subplot(4,1,4)
# plt.plot(time, x_ext_4_traj)
# plt.ylabel('Absolute Shank Rotation Velocity')
# plt.xlabel('Time (s)')
# plt.show()