import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Ridge
from scipy.special import expit
import collections

class Gaussian:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return np.exp(-(x-self.mu)**2/2/self.sigma**2)


class Sigmoid:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return expit((x-self.mu) / self.sigma)


class Regression():
    """
    1D regression model with Gaussian basis functions.
    """

    def __init__(self, x, t, centres, width, regularization_weight=1e-6, sigmoids=False):
        """
        :param x: samples of an independent variable
        :param t: corresponding samples of a dependent variable
        :param centres: a vector of Gaussian centres (should have similar range of values as x)
        :param width: sigma parameter of Gaussians
        :param regularization_weight: regularization strength parameter
        """
        if sigmoids:
            self.basis_functions = [Sigmoid(centre, width) for centre in centres]
        else:
            self.basis_functions = [Gaussian(centre, width) for centre in centres]
        self.ridge = Ridge(alpha=regularization_weight, fit_intercept=False)
        self.ridge.fit(self._get_features(x), t)

    def eval(self, x):
        """
        :param x: a new (or multiple samples) of the independent variable
        :return: the value of the curve at x
        """
        return self.ridge.predict(self._get_features(x))

    def _get_features(self, x):
        if not isinstance(x, collections.abc.Sized):
            x = [x]

        phi = np.zeros((len(x), len(self.basis_functions)))
        for i, basis_function in enumerate(self.basis_functions):
            phi[:,i] = basis_function(x)
        return phi

def get_angle_regression():
    data = np.array([
        [0.0006278166278166353, -15.151515151515145],
        [0.010511266511266493, -16.060606060606055],
        [0.020369852369852365, -16.36363636363636],
        [0.03267132867132866, -16.212121212121204],
        [0.043710955710955735, -15.303030303030297],
        [0.05227661227661226, -14.090909090909086],
        [0.06085470085470085, -13.181818181818176],
        [0.0694141414141414, -11.818181818181813],
        [0.07673659673659672, -10.303030303030301],
        [0.08775757575757576, -8.939393939393934],
        [0.09508003108003107, -7.424242424242422],
        [0.10487645687645691, -6.2121212121212075],
        [0.11587878787878791, -4.393939393939391],
        [0.12567521367521367, -3.1818181818181763],
        [0.13670862470862472, -2.1212121212121176],
        [0.1477420357420357, -1.0606060606060552],
        [0.15508313908313903, 0],
        [0.16739083139083133, 0],
        [0.1846091686091686, 0.3030303030303081],
        [0.20182128982128983, 0.7575757575757613],
        [0.2202828282828283, 0.7575757575757613],
        [0.23504584304584308, 0.9090909090909136],
        [0.2522703962703963, 1.0606060606060659],
        [0.26211033411033413, 1.2121212121212182],
        [0.27318725718725717, 1.2121212121212182],
        [0.28424553224553223, 1.6666666666666696],
        [0.2977715617715618, 1.9696969696969724],
        [0.3100730380730381, 2.1212121212121247],
        [0.32114374514374516, 2.272727272727275],
        [0.33343900543900545, 2.575757575757578],
        [0.3445221445221445, 2.4242424242424274],
        [0.35561149961149974, 2.1212121212121247],
        [0.36670707070707076, 1.6666666666666696],
        [0.3741227661227662, 0.9090909090909136],
        [0.3827630147630148, 0.3030303030303081],
        [0.3901973581973581, -0.9090909090909065],
        [0.39515773115773123, -1.818181818181813],
        [0.39886868686868693, -2.27272727272727]

    ])

    time = data[:,0]
    angle = data[:,1]

    centres = np.arange(0, 0.4, .05)
    width = .05
    result = Regression(time, angle, centres, width, .1, sigmoids=False)

    return result

def get_angular_velocity_regression():
    data = np.array([
        [-0.000668270154297268, -168.66570529556756],
        [-0.0006812567807775727, -165.81730522089444],
        [0.002490726737028992, -161.53902345979972],
        [0.0035383146064377202, -157.97662948342995],
        [0.00458914913246633, -155.12633552572848],
        [0.006703804811003966, -152.27414768499867],
        [0.005630243688634851, -150.13974151202214],
        [0.006681078214663461, -147.28944755432067],
        [0.0077286660840723, -143.72705357795095],
        [0.008785993923341118, -142.30095965758605],
        [0.008785993923341118, -142.30095965758605],
        [0.010890909632018553, -137.31247176085137],
        [0.011935250844807177, -133.03797776581328],
        [0.012973098744355704, -127.33928373343875],
        [0.0129698520877356, -126.6271837147705],
        [0.015081261109653132, -123.06289585537232],
        [0.015074767796413036, -121.63869581803576],
        [0.015071521139792932, -120.92659579936756],
        [0.016122355665821764, -118.07630184166604],
        [0.017173190191850374, -115.22600788396457],
        [0.017163450221990173, -113.0897078279597],
        [0.01716020356537007, -112.3776078092915],
        [0.0182110380913989, -109.52731385158998],
        [0.019265119274047726, -107.38911991255677],
        [0.019255379304187414, -105.25281985655195],
        [0.01924239267770722, -102.40441978187889],
        [0.020289980547115838, -98.84202580550905],
        [0.020276993920635644, -95.99362573083599],
        [0.022388402942553176, -92.42933787143787],
        [0.02344248412520189, -90.29114393240465],
        [0.02343274415534169, -88.15484387639984],
        [0.024490071994610618, -86.7287499560349],
        [0.024477085368130314, -83.88034988136181],
        [0.02446409874165001, -81.03194980668871],
        [0.025508439954438633, -76.75745581165069],
        [0.027626342289596373, -74.6173679895891],
        [0.027616602319736172, -72.48106793358428],
        [0.02761335566311618, -71.768967914916],
        [0.02972476468503371, -68.20468005551788],
        [0.02971502471517351, -66.06837999951307],
        [0.03183292705033136, -63.92829217745148],
        [0.03181669376723106, -60.36779208411011],
        [0.032867528293259785, -57.51749812640864],
        [0.032857788323399584, -55.3811980704038],
        [0.03285454166677948, -54.66909805173552],
        [0.03496919734531723, -51.81691021100568],
        [0.03601353855810574, -47.54241621596765],
        [0.03600704524486553, -46.11821617863109],
        [0.03706112642751436, -43.9800222395979],
        [0.039175782106052104, -41.12783439886806],
        [0.04022336997546083, -37.56544042249831],
        [0.04021038334898053, -34.71704034782519],
        [0.04126121787500925, -31.866746390123723],
        [0.04124173793528885, -27.594146278114067],
        [0.04123524462204864, -26.169946240777506],
        [0.04121901133894834, -22.60944614743613],
        [0.04439099485675502, -18.331164386341356],
        [0.04543858272616352, -14.768770409971609],
        [0.04542559609968333, -11.920370335298514],
        [0.04859433296086979, -6.929988555535459],
        [0.049638674173658415, -2.6554945604974307],
        [0.05280091772160478, 3.7590872566021574],
        [0.05278468443850437, 7.319587349943532],
        [0.05276520449878397, 11.592187461953188],
        [0.052742477902443574, 16.576887592631124],
        [0.05379006577185208, 20.13928156900087],
        [0.05483765364126081, 23.70167554537062],
        [0.055885241510669315, 27.264069521740396],
        [0.05693607603669826, 30.114363479441863],
        [0.057983663906106764, 33.67675745581161],
        [0.05902800511889528, 37.95125145084964],
        [0.059018265149035076, 40.08755150685445],
        [0.06006909967506391, 42.937845464555906],
        [0.06111344088785253, 47.212339459593935],
        [0.06215453544402105, 52.198933473300244],
        [0.06320861662666977, 54.337127412333444],
        [0.06318913668694937, 58.6097275243431],
        [0.06530703902210722, 60.749815346404674],
        [0.06636112020475593, 62.888009285437874],
        [0.06635138023489573, 65.02430934144269],
        [0.06739572144768435, 69.29880333648072],
        [0.0695103771262221, 72.15099117721057],
        [0.07056121165225071, 75.00128513491205],
        [0.07160879952165933, 78.5636791112818],
        [0.07372345520019696, 81.41586695201164],
        [0.0747645497563656, 86.40246096571795],
        [0.07793653327417205, 90.68074272681272],
        [0.07898736780020077, 93.53103668451419],
        [0.07897762783034057, 95.66733674051902],
        [0.08109877682211841, 97.09532454391233],
        [0.08321343250065616, 99.94751238464217],
        [0.0853280881791939, 102.79970022537202],
        [0.08744599051435176, 104.9397880474336],
        [0.08850007169700047, 107.0779819864668],
        [0.09167854852804724, 109.93206371022501],
        [0.09485702535909368, 112.78614543398324],
        [0.09803874884676056, 114.92812713907318],
        [0.10228429348693635, 117.0720027271915],
        [0.10653308478373213, 118.50377829664154],
        [0.11503716069056391, 119.94312939820509],
        [0.12142008760561784, 119.95449269637533],
        [0.1246115510631447, 119.96017434546044],
        [0.12780950783391198, 118.541655957209],
        [0.13206803910056786, 117.83713147065421],
        [0.13526599587133514, 116.41861308240279],
        [0.1384607059854821, 115.71219471281964],
        [0.14166190941286916, 113.58157630589992],
        [0.1427289772219984, 112.87137017026002],
        [0.14486635949687654, 110.73885788031194],
        [0.1470037417717548, 108.60634559036386],
        [0.15126551969503088, 107.1897210851408],
        [0.15127525966489108, 105.05342102913598],
        [0.15340614862652902, 104.34510877652446],
        [0.15660735205391618, 102.21449036960473],
        [0.1566105987105363, 101.50239035093647],
        [0.15981180213792356, 99.37177194401676],
        [0.16407358006119954, 97.95514743879369],
        [0.16621096233607768, 95.8226351488456],
        [0.16941541242008495, 92.97991672325763],
        [0.17369017696984135, 88.71489214336147],
        [0.1758243125880995, 87.29447987208167],
        [0.17689462705384873, 85.87217371777348],
        [0.17903525598534686, 83.02756140915713],
        [0.1811758849168451, 80.18294910054077],
        [0.18438358165747237, 76.62813065628451],
        [0.18652096393235063, 74.49561836633643],
        [0.1897254140163579, 71.65289994074844],
        [0.19292337078712496, 70.23438155249701],
        [0.19506399971862332, 67.38976924388065],
        [0.1993322709551394, 64.54894470132105],
        [0.20253672103914677, 61.70622627573306],
        [0.20680823893228295, 58.153301714505176],
        [0.21108625013865945, 53.17617711594073],
        [0.21535452137517574, 50.33535257338113],
        [0.21642158918430465, 49.62514643774122],
        [0.22069310707744105, 46.07222187651334],
        [0.22389431050482822, 43.94160346959363],
        [0.22709876058883538, 41.098885044005655],
        [0.22923938952033363, 38.25427273538931],
        [0.2324405929477209, 36.1236543284696],
        [0.23670561752761698, 33.99492980457828],
        [0.23884624645911523, 31.15031749596193],
        [0.24311451769563153, 28.309492953402298],
        [0.2463189677796388, 25.466774527814323],
        [0.24951692455040586, 24.04825613956288],
        [0.25378194913030205, 21.91953161567156],
        [0.25911404151932727, 19.08060095614033],
        [0.26444613390835237, 16.241670296609072],
        [0.2665737762133704, 16.24545806266582],
        [0.2708420474498867, 13.404633520106216],
        [0.2751070720297829, 11.275908996214895],
        [0.27724120764804083, 9.85549672493508],
        [0.28257005338044605, 7.728666084072103],
        [0.2857680101512132, 6.310147695820689],
        [0.2889659669219804, 4.8916293075692465],
        [0.2953618804635145, 2.0545925310663904],
        [0.30068747953929975, 0.6398619088716941],
        [0.30282161515755757, -0.7805503624080927],
        [0.30921752869909214, -3.6175871389109773],
        [0.313479306622368, -5.034211644134018],
        [0.32093904131641127, -7.86935453760853],
        [0.3241369980871782, -9.287872925859944],
        [0.32945935050634323, -9.990503529386359],
        [0.33584877073463737, -11.403340268552682],
        [0.34011379531453345, -13.532064792444004],
        [0.3433149987419206, -15.662683199363727],
        [0.3518385545884728, -18.495932209809837],
        [0.35291211571084213, -20.630338382786306],
        [0.3561100724816091, -22.04885677103772],
        [0.35931452256561647, -24.891575196625723],
        [0.36358604045875276, -28.444499757853606],
        [0.365729916046871, -32.001212085138235],
        [0.3689343661308784, -34.84393051072621],
        [0.37320263736739445, -37.68475505328581],
        [0.3774709086039105, -40.52557959584544],
        [0.38173917984042705, -43.366404138405045],
        [0.38813834003858116, -46.91554093357618],
        [0.39240336461847747, -49.04426545746753],
        [0.3945342535801155, -49.75257771007904],
        [0.3945407468933555, -51.1767777474156]

    ])

    time = data[:,0]
    angular_velocity = data[:,1]

    centres = np.arange(0, 0.4, .05)
    width = .05
    result = Regression(time, angular_velocity, centres, width, .1, sigmoids=False)

    return result

def get_excitation_regression(data):
    time = data[:,0]
    excitation = data[:,1]

    centres = np.arange(0, 0.4, .05)
    width = .05
    result = Regression(time, excitation, centres, width, .05, sigmoids=False)

    return result

# def get_FES_signal(freq):
#     data_FES = []
#     time_FES = []
#
#     activation_reg = get_excitation_regression()
#     percent_gait = 0.4
#     t_gait = 1.07   #time for average gait cycle
#     time_tot = percent_gait*t_gait
#     period = 1/freq
#     time_FES.append(0)
#     data_FES.append(0)
#     time_FES.append(period/2)
#     data_FES.append(activation_reg.eval(period/2)[0])
#     time_temp = period/2
#     i = 1
#     while(time_temp < time_tot):
#         if i%2 != 0:
#             time_FES.append(time_temp + (period/2))
#             data_FES.append(0)
#         else:
#             time_FES.append(time_temp + (period/2))
#             data_FES.append(activation_reg.eval(time_temp + (period/2))[0])
#         i = i+1
#         time_temp = time_temp + period/2
#
#     data = []
#     for i in range(len(time_FES)):
#         data.append([time_FES[i], data_FES[i]])
#     data = np.array(data)
#
#     time = data[:,0]
#     FES = data[:,1]
#
#     centres = np.arange(period/2, time_tot-period/2, period)
#     width = period/14
#     result = Regression(time, FES, centres, width, period/20, sigmoids=False)
#
#     return result

natural_excitation = np.array([
        [0.0011197287857882265, 0.0024038461538460343],
        [0.00336457614694724, 0],
        [0.006725109951707525, 0.0024038461538460343],
        [0.012330491117626824, 0.0024038461538460343],
        [0.011209414884442936, 0.0024038461538460343],
        [0.02018341453949643, -0.0024038461538460343],
        [0.016814796050362235, 0.0024038461538460343],
        [0.025783405915833085, 0.0024038461538460343],
        [0.030267710848568524, 0.0024038461538460343],
        [0.038115244480855515, 0.0024038461538460343],
        [0.04147308339082445, 0.007211538461538325],
        [0.0425860749396344, 0.014423076923076872],
        [0.04705960029320458, 0.024038461538461675],
        [0.05041743920317354, 0.028846153846153744],
        [0.053775278113142505, 0.033653846153846034],
        [0.058243413677130096, 0.048076923076922906],
        [0.061595862797516415, 0.05769230769230771],
        [0.06270615945153504, 0.06730769230769229],
        [0.06605591367713007, 0.07932692307692313],
        [0.06828728656433258, 0.08894230769230749],
        [0.07052135434632634, 0.09615384615384603],
        [0.07163434589513629, 0.10336538461538458],
        [0.07609978656433256, 0.12019230769230771],
        [0.07833115945153502, 0.1298076923076923],
        [0.07831768497757852, 0.1418269230769229],
        [0.08167282899275613, 0.14903846153846145],
        [0.08278312564677476, 0.15865384615384603],
        [0.08277504096240085, 0.16586538461538458],
        [0.08500102406002075, 0.18028846153846145],
        [0.08722700715764059, 0.19471153846153855],
        [0.08945568515005176, 0.20673076923076916],
        [0.09056598180407044, 0.21634615384615374],
        [0.09167358356329774, 0.22836538461538458],
        [0.0927865751121077, 0.23557692307692313],
        [0.09501794799931013, 0.2451923076923077],
        [0.09613093954812013, 0.25240384615384603],
        [0.09612554975853749, 0.2572115384615383],
        [0.09723045662297347, 0.2716346153846154],
        [0.09946182951017596, 0.28125],
        [0.10057212616419464, 0.2908653846153846],
        [0.10168242281821321, 0.3004807692307693],
        [0.10503217704380818, 0.3124999999999999],
        [0.10501061788547772, 0.33173076923076916],
        [0.1083603721110728, 0.34375],
        [0.10835228742669889, 0.35096153846153844],
        [0.10946258408071746, 0.360576923076923],
        [0.10946258408071746, 0.360576923076923],
        [0.11393071964470508, 0.3749999999999999],
        [0.11391994006553985, 0.3846153846153846],
        [0.1139145502759572, 0.38942307692307687],
        [0.11838268583994482, 0.40384615384615385],
        [0.11949567738875477, 0.4110576923076923],
        [0.12060866893756472, 0.4182692307692307],
        [0.12284273671955848, 0.42548076923076916],
        [0.1250714147119697, 0.4375],
        [0.12505524534322182, 0.45192307692307687],
        [0.1261709317868231, 0.45673076923076916],
        [0.12616554199724045, 0.46153846153846145],
        [0.12840230467402558, 0.46634615384615385],
        [0.12951260132804415, 0.4759615384615383],
        [0.1317520588996206, 0.4783653846153846],
        [0.13398612668161436, 0.485576923076923],
        [0.1362174995688169, 0.4951923076923076],
        [0.13845426224560192, 0.5],
        [0.14293048249396345, 0.5072115384615384],
        [0.14292509270438086, 0.5120192307692307],
        [0.14516455027595726, 0.5144230769230769],
        [0.14964616031390138, 0.516826923076923],
        [0.1530066941186617, 0.5192307692307693],
        [0.16309368532252505, 0.5216346153846153],
        [0.16309368532252505, 0.5216346153846153],
        [0.1675860749396344, 0.5144230769230769],
        [0.17320223568471893, 0.5048076923076922],
        [0.17656546438427045, 0.5048076923076922],
        [0.17769193040703696, 0.5],
        [0.17993947266298727, 0.4951923076923076],
        [0.18106324379096245, 0.49278846153846156],
        [0.1855556334080718, 0.485576923076923],
        [0.1866847943256295, 0.4783653846153846],
        [0.18893233658157993, 0.4735576923076923],
        [0.1900614974991377, 0.46634615384615385],
        [0.19118526862711283, 0.4639423076923077],
        [0.19568304803380476, 0.45192307692307687],
        [0.19905436141773025, 0.44471153846153844],
        [0.20018352233528808, 0.4375],
        [0.20243645438082103, 0.4278846153846153],
        [0.2069315388927217, 0.4182692307692307],
        [0.211423928509831, 0.4110576923076923],
        [0.21591362323214902, 0.4062499999999999],
        [0.22377193644360122, 0.3966346153846154],
        [0.22040601284925843, 0.39903846153846145],
        [0.22266163978958264, 0.3870192307692307],
        [0.22939887676785103, 0.37740384615384615],
        [0.23388857149016906, 0.37259615384615374],
        [0.23613341885132805, 0.3701923076923077],
        [0.24398903716798898, 0.36298076923076916],
        [0.24847334210072441, 0.36298076923076916],
        [0.2518392656950673, 0.360576923076923],
        [0.2552051892894102, 0.35817307692307687],
        [0.2596921891169369, 0.3557692307692307],
        [0.26530296007243875, 0.35096153846153844],
        [0.2709083412383581, 0.35096153846153844],
        [0.2753953410658848, 0.3485576923076923],
        [0.28100341712659543, 0.34615384615384603],
        [0.2843693407209383, 0.34375],
        [0.2899747218868575, 0.34375],
        [0.3000671028803036, 0.34134615384615385],
        [0.30455410270783034, 0.3389423076923076],
        [0.30455410270783034, 0.3389423076923076],
        [0.30680164496378065, 0.3341346153846154],
        [0.3135307972576751, 0.33173076923076916],
        [0.3168940259572267, 0.33173076923076916],
        [0.321386415574336, 0.3245192307692307],
        [0.32363126293549505, 0.3221153846153846],
        [0.32475772895826155, 0.3173076923076923],
        [0.3292474236805795, 0.3124999999999999],
        [0.33486088953087273, 0.30528846153846145],
        [0.3371084317868231, 0.3004807692307693],
        [0.33935597404277335, 0.29567307692307687],
        [0.34160621119351514, 0.28846153846153844],
        [0.3427326772162815, 0.28365384615384603],
        [0.3461066854949983, 0.27403846153846145],
        [0.3483596175405312, 0.26442307692307687],
        [0.3517309309244568, 0.2572115384615383],
        [0.35286009184201456, 0.25],
        [0.35623140522594005, 0.24278846153846145],
        [0.35736326103828914, 0.23317307692307687],
        [0.3607345744222145, 0.22596153846153832],
        [0.3629848115729563, 0.21875],
        [0.3641139724905141, 0.21153846153846145],
        [0.3652404385132804, 0.20673076923076916],
        [0.3686117518972059, 0.19951923076923062],
        [0.36973552302518115, 0.19711538461538458],
        [0.37310953130389796, 0.18749999999999978],
        [0.3753678531390135, 0.1730769230769229],
        [0.3776207851845464, 0.16346153846153855],
        [0.3787499461021043, 0.15624999999999978],
        [0.37988180191445325, 0.1466346153846152],
        [0.38326389487754403, 0.1298076923076923],
        [0.38663790315626084, 0.12019230769230771],
        [0.3877670640738186, 0.11298076923076916],
        [0.3911383774577441, 0.10576923076923084],
        [0.39451508063125224, 0.09375],
        [0.3967653177819939, 0.08653846153846145],
        [0.3990182498275267, 0.07692307692307687],
        [0.40127387676785103, 0.06490384615384626],
        [0.40239764789582605, 0.06249999999999978],
        [0.4046451901517765, 0.05769230769230771],
        [0.4068954273025182, 0.050480769230769384],
        [0.4102667406864436, 0.043269230769230616],
        [0.4125196727319766, 0.033653846153846034],
        [0.4158936810106934, 0.024038461538461675],
        [0.42150984175577794, 0.014423076923076872],
        [0.42375199422214566, 0.014423076923076872],
        [0.425999536478096, 0.00961538461538436]
    ])

# time = np.arange(0, 0.4, 0.01)
# get_FES_signal(30)
# FES_reg = get_FES_signal(50)
# FES_traj = []
#
# activation_reg = get_excitation_regression()
# activation_traj = []

# for i in range(len(time)):
#     FES_traj.append(FES_reg.eval(time[i]))
#     activation_traj.append(activation_reg.eval(time[i]))
# plt.plot(time, FES_traj)
# plt.plot(time, activation_traj)
# plt.show()
#
# angle_reg = get_angle_regression()
# angle_traj = []
#
# angular_velocity_reg = get_angular_velocity_regression()
# angular_velocity_traj = []
#
# activation_reg = get_activation_regression()
# activation_traj = []
# #
# for i in range(len(time)):
#      angle_traj.append(angle_reg.eval(time[i]))
#     angular_velocity_traj.append(angular_velocity_reg.eval(time[i]))
#       activation_traj.append(activation_reg.eval(time[i]))
#
# plt.figure()
# plt.subplot(3, 1, 1)
# plt.plot(time, angle_traj)
# plt.ylabel('Ankle Joint Angle (degrees)')
# plt.subplot(3, 1, 2)
# plt.plot(time, angular_velocity_traj)
# plt.ylabel('Ankle Angular Velocity (degree/s)')
# plt.subplot(3, 1, 3)
# plt.plot(time, activation_traj)
# plt.ylabel('Activation')
# plt.xlabel('Time (s)')
# plt.show()