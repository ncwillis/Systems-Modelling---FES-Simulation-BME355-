import numpy as np
from sklearn.linear_model import Ridge
from scipy.special import expit
import collections
import csv

class Gaussian:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return np.exp(-(x-self.mu)**2/2/self.sigma**2)


class Sigmoid:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return expit((x-self.mu) / self.sigma)


class Regression():
    """
    1D regression model with Gaussian basis functions.
    """

    def __init__(self, x, t, centres, width, regularization_weight=1e-6, sigmoids=False):
        """
        :param x: samples of an independent variable
        :param t: corresponding samples of a dependent variable
        :param centres: a vector of Gaussian centres (should have similar range of values as x)
        :param width: sigma parameter of Gaussians
        :param regularization_weight: regularization strength parameter
        """
        if sigmoids:
            self.basis_functions = [Sigmoid(centre, width) for centre in centres]
        else:
            self.basis_functions = [Gaussian(centre, width) for centre in centres]
        self.ridge = Ridge(alpha=regularization_weight, fit_intercept=False)
        self.ridge.fit(self._get_features(x), t)

    def eval(self, x):
        """
        :param x: a new (or multiple samples) of the independent variable
        :return: the value of the curve at x
        """
        return self.ridge.predict(self._get_features(x))

    def _get_features(self, x):
        if not isinstance(x, collections.abc.Sized):
            x = [x]

        phi = np.zeros((len(x), len(self.basis_functions)))
        for i, basis_function in enumerate(self.basis_functions):
            phi[:,i] = basis_function(x)
        return phi

def get_angle_regression():
    """
    :return: Regression object for ankle angle during dorsiflexion
    """
    natural_angle_trajectory = []
    with open('natural_angle_trajectory.txt') as csv_file:
        csv_read = csv.reader(csv_file, delimiter=',')
        for row in csv_read:
            row_content = [float(row[0]), float(row[1])]
            natural_angle_trajectory.append(row_content)
    natural_angle_trajectory = np.array(natural_angle_trajectory)

    time = natural_angle_trajectory[:,0]
    angle = natural_angle_trajectory[:,1]

    centres = np.arange(0, 0.4, .075)
    width = .075
    result = Regression(time, angle, centres, width, .075, sigmoids=False)

    return result

def get_angular_velocity_regression():
    """
    :return: Regression object for angular velocity of ankle joint during dorsiflexion
    """
    time = np.arange(0, 0.4, 0.01)
    angles = get_angle_regression()
    angle_traj = np.zeros(len(time))
    for i in range(len(time)):
        angle_traj[i] = angles.eval(time[i])

    dy = np.zeros(angle_traj.shape, np.float)
    dy[0:-1] = np.diff(angle_traj) / np.diff(time)
    dy[-1] = (angle_traj[-1] - angle_traj[-2]) / (time[-1] - time[-2])
    dy = np.array(dy)

    angular_velocity = dy

    centres = np.arange(0, 0.4, .075)
    width = .075
    result = Regression(time, angular_velocity, centres, width, .075, sigmoids=False)

    return result

def get_excitation_regression(data):
    """
    :param data: Excitation-time dataset
    :return: Regression object for TA excitation
    """
    time = data[:,0]
    excitation = data[:,1]

    centres = np.arange(0, 0.4, .075)
    width = .075
    result = Regression(time, excitation, centres, width, .075, sigmoids=True)

    return result

def get_excitation_validation_reg(data):
    """
    :param data: Excitation-time dataset
    :return: Regression object for TA excitation
    """
    time = data[:,0]
    excitation = data[:,1]

    centres = np.arange(0, 0.4, .05)
    width = .05
    result = Regression(time, excitation, centres, width, .1, sigmoids=True)

    return result

natural_excitation = np.array([
        [0.0011197287857882265, 0.0024038461538460343],
        [0.00336457614694724, 0],
        [0.006725109951707525, 0.0024038461538460343],
        [0.012330491117626824, 0.0024038461538460343],
        [0.011209414884442936, 0.0024038461538460343],
        [0.02018341453949643, -0.0024038461538460343],
        [0.016814796050362235, 0.0024038461538460343],
        [0.025783405915833085, 0.0024038461538460343],
        [0.030267710848568524, 0.0024038461538460343],
        [0.038115244480855515, 0.0024038461538460343],
        [0.04147308339082445, 0.007211538461538325],
        [0.0425860749396344, 0.014423076923076872],
        [0.04705960029320458, 0.024038461538461675],
        [0.05041743920317354, 0.028846153846153744],
        [0.053775278113142505, 0.033653846153846034],
        [0.058243413677130096, 0.048076923076922906],
        [0.061595862797516415, 0.05769230769230771],
        [0.06270615945153504, 0.06730769230769229],
        [0.06605591367713007, 0.07932692307692313],
        [0.06828728656433258, 0.08894230769230749],
        [0.07052135434632634, 0.09615384615384603],
        [0.07163434589513629, 0.10336538461538458],
        [0.07609978656433256, 0.12019230769230771],
        [0.07833115945153502, 0.1298076923076923],
        [0.07831768497757852, 0.1418269230769229],
        [0.08167282899275613, 0.14903846153846145],
        [0.08278312564677476, 0.15865384615384603],
        [0.08277504096240085, 0.16586538461538458],
        [0.08500102406002075, 0.18028846153846145],
        [0.08722700715764059, 0.19471153846153855],
        [0.08945568515005176, 0.20673076923076916],
        [0.09056598180407044, 0.21634615384615374],
        [0.09167358356329774, 0.22836538461538458],
        [0.0927865751121077, 0.23557692307692313],
        [0.09501794799931013, 0.2451923076923077],
        [0.09613093954812013, 0.25240384615384603],
        [0.09612554975853749, 0.2572115384615383],
        [0.09723045662297347, 0.2716346153846154],
        [0.09946182951017596, 0.28125],
        [0.10057212616419464, 0.2908653846153846],
        [0.10168242281821321, 0.3004807692307693],
        [0.10503217704380818, 0.3124999999999999],
        [0.10501061788547772, 0.33173076923076916],
        [0.1083603721110728, 0.34375],
        [0.10835228742669889, 0.35096153846153844],
        [0.10946258408071746, 0.360576923076923],
        [0.10946258408071746, 0.360576923076923],
        [0.11393071964470508, 0.3749999999999999],
        [0.11391994006553985, 0.3846153846153846],
        [0.1139145502759572, 0.38942307692307687],
        [0.11838268583994482, 0.40384615384615385],
        [0.11949567738875477, 0.4110576923076923],
        [0.12060866893756472, 0.4182692307692307],
        [0.12284273671955848, 0.42548076923076916],
        [0.1250714147119697, 0.4375],
        [0.12505524534322182, 0.45192307692307687],
        [0.1261709317868231, 0.45673076923076916],
        [0.12616554199724045, 0.46153846153846145],
        [0.12840230467402558, 0.46634615384615385],
        [0.12951260132804415, 0.4759615384615383],
        [0.1317520588996206, 0.4783653846153846],
        [0.13398612668161436, 0.485576923076923],
        [0.1362174995688169, 0.4951923076923076],
        [0.13845426224560192, 0.5],
        [0.14293048249396345, 0.5072115384615384],
        [0.14292509270438086, 0.5120192307692307],
        [0.14516455027595726, 0.5144230769230769],
        [0.14964616031390138, 0.516826923076923],
        [0.1530066941186617, 0.5192307692307693],
        [0.16309368532252505, 0.5216346153846153],
        [0.16309368532252505, 0.5216346153846153],
        [0.1675860749396344, 0.5144230769230769],
        [0.17320223568471893, 0.5048076923076922],
        [0.17656546438427045, 0.5048076923076922],
        [0.17769193040703696, 0.5],
        [0.17993947266298727, 0.4951923076923076],
        [0.18106324379096245, 0.49278846153846156],
        [0.1855556334080718, 0.485576923076923],
        [0.1866847943256295, 0.4783653846153846],
        [0.18893233658157993, 0.4735576923076923],
        [0.1900614974991377, 0.46634615384615385],
        [0.19118526862711283, 0.4639423076923077],
        [0.19568304803380476, 0.45192307692307687],
        [0.19905436141773025, 0.44471153846153844],
        [0.20018352233528808, 0.4375],
        [0.20243645438082103, 0.4278846153846153],
        [0.2069315388927217, 0.4182692307692307],
        [0.211423928509831, 0.4110576923076923],
        [0.21591362323214902, 0.4062499999999999],
        [0.22377193644360122, 0.3966346153846154],
        [0.22040601284925843, 0.39903846153846145],
        [0.22266163978958264, 0.3870192307692307],
        [0.22939887676785103, 0.37740384615384615],
        [0.23388857149016906, 0.37259615384615374],
        [0.23613341885132805, 0.3701923076923077],
        [0.24398903716798898, 0.36298076923076916],
        [0.24847334210072441, 0.36298076923076916],
        [0.2518392656950673, 0.360576923076923],
        [0.2552051892894102, 0.35817307692307687],
        [0.2596921891169369, 0.3557692307692307],
        [0.26530296007243875, 0.35096153846153844],
        [0.2709083412383581, 0.35096153846153844],
        [0.2753953410658848, 0.3485576923076923],
        [0.28100341712659543, 0.34615384615384603],
        [0.2843693407209383, 0.34375],
        [0.2899747218868575, 0.34375],
        [0.3000671028803036, 0.34134615384615385],
        [0.30455410270783034, 0.3389423076923076],
        [0.30455410270783034, 0.3389423076923076],
        [0.30680164496378065, 0.3341346153846154],
        [0.3135307972576751, 0.33173076923076916],
        [0.3168940259572267, 0.33173076923076916],
        [0.321386415574336, 0.3245192307692307],
        [0.32363126293549505, 0.3221153846153846],
        [0.32475772895826155, 0.3173076923076923],
        [0.3292474236805795, 0.3124999999999999],
        [0.33486088953087273, 0.30528846153846145],
        [0.3371084317868231, 0.3004807692307693],
        [0.33935597404277335, 0.29567307692307687],
        [0.34160621119351514, 0.28846153846153844],
        [0.3427326772162815, 0.28365384615384603],
        [0.3461066854949983, 0.27403846153846145],
        [0.3483596175405312, 0.26442307692307687],
        [0.3517309309244568, 0.2572115384615383],
        [0.35286009184201456, 0.25],
        [0.35623140522594005, 0.24278846153846145],
        [0.35736326103828914, 0.23317307692307687],
        [0.3607345744222145, 0.22596153846153832],
        [0.3629848115729563, 0.21875],
        [0.3641139724905141, 0.21153846153846145],
        [0.3652404385132804, 0.20673076923076916],
        [0.3686117518972059, 0.19951923076923062],
        [0.36973552302518115, 0.19711538461538458],
        [0.37310953130389796, 0.18749999999999978],
        [0.3753678531390135, 0.1730769230769229],
        [0.3776207851845464, 0.16346153846153855],
        [0.3787499461021043, 0.15624999999999978],
        [0.37988180191445325, 0.1466346153846152],
        [0.38326389487754403, 0.1298076923076923],
        [0.38663790315626084, 0.12019230769230771],
        [0.3877670640738186, 0.11298076923076916],
        [0.3911383774577441, 0.10576923076923084],
        [0.39451508063125224, 0.09375],
        [0.3967653177819939, 0.08653846153846145],
        [0.3990182498275267, 0.07692307692307687],
        [0.40127387676785103, 0.06490384615384626],
        [0.40239764789582605, 0.06249999999999978],
        [0.4046451901517765, 0.05769230769230771],
        [0.4068954273025182, 0.050480769230769384],
        [0.4102667406864436, 0.043269230769230616],
        [0.4125196727319766, 0.033653846153846034],
        [0.4158936810106934, 0.024038461538461675],
        [0.42150984175577794, 0.014423076923076872],
        [0.42375199422214566, 0.014423076923076872],
        [0.425999536478096, 0.00961538461538436]
    ])